using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Homework_Theme_04
{
    class Program
    {
        static void Main(string[] args)
        {
            // Задание 1.
            // Заказчик просит вас написать приложение по учёту финансов
            // и продемонстрировать его работу.
            // Суть задачи в следующем: 
            // Руководство фирмы по 12 месяцам ведет учет расходов и поступлений средств. 
            // За год получены два массива – расходов и поступлений.
            // Определить прибыли по месяцам
            // Количество месяцев с положительной прибылью.
            // Добавить возможность вывода трех худших показателей по месяцам, с худшей прибылью, 
            // если есть несколько месяцев, в некоторых худшая прибыль совпала - вывести их все.
            // Организовать дружелюбный интерфейс взаимодействия и вывода данных на экран

            // Пример
            //       
            // Месяц      Доход, тыс. руб.  Расход, тыс. руб.     Прибыль, тыс. руб.
            //     1              100 000             80 000                 20 000
            //     2              120 000             90 000                 30 000
            //     3               80 000             70 000                 10 000
            //     4               70 000             70 000                      0
            //     5              100 000             80 000                 20 000
            //     6              200 000            120 000                 80 000
            //     7              130 000            140 000                -10 000
            //     8              150 000             65 000                 85 000
            //     9              190 000             90 000                100 000
            //    10              110 000             70 000                 40 000
            //    11              150 000            120 000                 30 000
            //    12              100 000             80 000                 20 000
            // 
            // Худшая прибыль в месяцах: 7, 4, 1, 5, 12
            // Месяцев с положительной прибылью: 10


            // * Задание 2
            // Заказчику требуется приложение строящее первых N строк треугольника паскаля. N < 25
            // 
            // При N = 9. Треугольник выглядит следующим образом:
            //                                 1
            //                             1       1
            //                         1       2       1
            //                     1       3       3       1
            //                 1       4       6       4       1
            //             1       5      10      10       5       1
            //         1       6      15      20      15       6       1
            //     1       7      21      35      35       21      7       1
            //                                                              
            //                                                              
            // Простое решение:                                                             
            // 1
            // 1       1
            // 1       2       1
            // 1       3       3       1
            // 1       4       6       4       1
            // 1       5      10      10       5       1
            // 1       6      15      20      15       6       1
            // 1       7      21      35      35       21      7       1
            // 
            // Справка: https://ru.wikipedia.org/wiki/Треугольник_Паскаля


            // 
            // * Задание 3.1
            // Заказчику требуется приложение позволяющщее умножать математическую матрицу на число
            // Справка https://ru.wikipedia.org/wiki/Матрица_(математика)
            // Справка https://ru.wikipedia.org/wiki/Матрица_(математика)#Умножение_матрицы_на_число
            // Добавить возможность ввода количество строк и столцов матрицы и число,
            // на которое будет производиться умножение.
            // Матрицы заполняются автоматически. 
            // Если по введённым пользователем данным действие произвести невозможно - сообщить об этом
            //
            // Пример
            //
            //      |  1  3  5  |   |  5  15  25  |
            //  5 х |  4  5  7  | = | 20  25  35  |
            //      |  5  3  1  |   | 25  15   5  |
            //
            //
            // ** Задание 3.2
            // Заказчику требуется приложение позволяющщее складывать и вычитать математические матрицы
            // Справка https://ru.wikipedia.org/wiki/Матрица_(математика)
            // Справка https://ru.wikipedia.org/wiki/Матрица_(математика)#Сложение_матриц
            // Добавить возможность ввода количество строк и столцов матрицы.
            // Матрицы заполняются автоматически
            // Если по введённым пользователем данным действие произвести невозможно - сообщить об этом
            //
            // Пример
            //  |  1  3  5  |   |  1  3  4  |   |  2   6   9  |
            //  |  4  5  7  | + |  2  5  6  | = |  6  10  13  |
            //  |  5  3  1  |   |  3  6  7  |   |  8   9   8  |
            //  
            //  
            //  |  1  3  5  |   |  1  3  4  |   |  0   0   1  |
            //  |  4  5  7  | - |  2  5  6  | = |  2   0   1  |
            //  |  5  3  1  |   |  3  6  7  |   |  2  -3  -6  |
            //
            // *** Задание 3.3
            // Заказчику требуется приложение позволяющщее перемножать математические матрицы
            // Справка https://ru.wikipedia.org/wiki/Матрица_(математика)
            // Справка https://ru.wikipedia.org/wiki/Матрица_(математика)#Умножение_матриц
            // Добавить возможность ввода количество строк и столцов матрицы.
            // Матрицы заполняются автоматически
            // Если по введённым пользователем данным действие произвести нельзя - сообщить об этом
            //  
            //  |  1  3  5  |   |  1  3  4  |   | 22  48  57  |
            //  |  4  5  7  | х |  2  5  6  | = | 35  79  95  |
            //  |  5  3  1  |   |  3  6  7  |   | 14  36  45  |
            //
            //  
            //                  | 4 |   
            //  |  1  2  3  | х | 5 | = | 32 |
            //                  | 6 |  
            //


            int[] month = Enumerable.Range(1, 12).ToArray(); // масив месяцев 
            int[] AllIncome = new int[12]; // массив прибыли
            int[] AllExpence = new int[12]; // массив расходов
            int[] profit = new int[12]; // масив прибыли
            int[] output = new int[3]; // Массив для сортировки полученных индексов

            Random IncomeR = new Random(); // Генератор прибыли
            Random ExpenceR = new Random(); // Генератор расходав

            for (int i = 0; i < month.Length; i++) // Цикл заполнения массивов
            {
                int tempIncomeR = IncomeR.Next(50000, 200001); // Генерация доходов
                int tempExpenceR = ExpenceR.Next(50000, 180001); // Генерация расходов

                AllIncome[i] = tempIncomeR; // Заполнение массива доходов
                AllExpence[i] = tempExpenceR; // Заполнение массива расходов

                profit[i] = tempIncomeR - tempExpenceR; // Заполнение массива прибыли
            }

            AllIncome[7] = 100000;   //
            AllIncome[8] = 200000;   //
            AllIncome[10] = 200000;  //
            AllIncome[11] = 200000;  //
                                     //
            AllExpence[7] = 99800;   //
            AllExpence[8] = 199700;  // заполнение нескольких значенний массивов для формирования одинакового результата
            AllExpence[10] = 199700; //
            AllExpence[11] = 199700; //
                                     //
            profit[7] = 200;         //
            profit[8] = 300;         //
            profit[10] = 300;        //
            profit[11] = 300;        //

            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"{"Месяц"} {"Доход",26} {"Расходы",30} {"Прибыль\n",32}"); // Формирование шапки таблицы

            for (int j = 0; j < month.Length; j++) // цикл вывода массивов на экран
            {
                Console.ForegroundColor = ConsoleColor.Blue;
                Console.WriteLine(string.Format("{0,5} {1,26} {2,30} {3, 31}", month[j], AllIncome[j], AllExpence[j], profit[j])); // форматирование вывода
                Console.ForegroundColor = ConsoleColor.Gray;
                Console.WriteLine("    ___________________________________________________________________________________________");
            }

            int[] tempMas = (int[])profit.Clone();    // Копия массива "profit"
            Array.Sort(tempMas); // Сортировка временного массива
            Array.Resize(ref tempMas, 3);


            for (int i = 0; i < 3; i++) // Цикл нахождения индексов наименьшей приьыли
            {
                int index = Array.IndexOf(profit, tempMas[i]); // Индекс наименьшего значения в массиве
                profit.SetValue(0, Array.IndexOf(profit, tempMas[i])); // Присваивание значения "0" выведенному значению, чтобы изменить индекс первого вхождения значения
                index = index + 1; // отображение мндекса соответственно месяцу
                output[i] = index; // Заполнение массива полученными индексами        
            }


            for (int i = 0; i < tempMas.Length; i++) // Цикл сравнения временного массива с массивом пибыли
            {
                for (int j = 0; j < profit.Length; j++)
                {
                    if (tempMas[i] == profit[j])
                    {
                        Array.Resize(ref output, output.Length + 1); // изменение длинны массива в соответствии с колличеством добавляемых элементов
                        int a = output.Length - 1; // - 1 так как число элементов массива больше чем конечный индекс массива
                        int ind = Array.IndexOf(profit, tempMas[i]); // получение индекса повторяющегося числа
                        output[a] = ind + 1; // Заполнение массива полученными индексами в соответствии с индексами месяцев
                        profit.SetValue(0, Array.IndexOf(profit, tempMas[i])); // Присваивание значения "0" выведенному значению, чтобы изменить индекс первого вхождения значения 
                    }
                }
            }

            Console.Write("\nнаименьшая и схожая прибыль в месяцах: ");

            for (int i = 0; i < output.Length - 1; i++) // Цикл вывода отсортированного массива с индесками output
            {
                Console.Write(output[i] + ", "); // Вывод значений массива до предпоследнего индекса и вывод "," для более удобного визуального восприятия
            }
            Console.Write(output[output.Length - 1]); // Вывод последнего элемента массива

            Console.ReadKey();
        }
    }
}
